version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@2.0.3 

commands:
  # 4. Rollback Phase
  # Reusable command that will handle the the work of destroying the green infrastructure  
  # Given a WORKFLOW ID, rollback or destroy the CloudFormation stack
  destroy-environment: 
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
    steps:
      - run:
          name: Destroy environment << parameters.workflow-id >>
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable whereas  
          # ${CIRCLE_WORKFLOW_ID:0:7} takes the first 7 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            if aws s3 ls | grep udapeople-${CIRCLE_WORKFLOW_ID:0:7}; then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            fi
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
            workflow-id: "${CIRCLE_WORKFLOW_ID}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow-id:
        type: string 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: << parameters.workflow_id >>" \
            --request GET https://api.memstash.io/values/migration_status_<< parameters.workflow_id >>) 

            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
jobs:
  integration-test-templates:
    parameters:
      runner:
        type: executor
        default: cimg
    executor: <<parameters.runner>>
    steps:
      - slack/notify:
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Build the frontend"
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Front-end build
          command: |
            cd frontend
            npm run build
            cd dist
            ls
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      # notify_on_fail_with_template. Taken from Circleci Developer page  - https://circleci.com/developer/orbs/orb/circleci/slack
      # In the event the front-end build has failed, alert UdaPeople
      - slack/notify:
          template: basic_fail_1
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Build the backend"
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack/notify:
          template: basic_fail_1
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Test the frontend"
      - checkout
      - restore_cache:
          key: frontend-test
      - run:
          name: frontend test
          command: |
            cd frontend 
            npm i
            npm run test

      # In the event test-frontend has failed, alert UdaPeople
      - slack/notify:
          template: basic_fail_1
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Test the backend"
      - checkout
      - restore_cache:
          key: backend-test
      - run:
          name: backend test 
          command: |
            cd backend
            npm i
            npm run test

      # In the event test-backend has failed, alert UdaPeople
      - slack/notify:
          template: basic_fail_1
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail

  # Scan for known vulnerabilities
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Scan the frontend"
      - checkout
      - restore_cache:
          key: frontend-scan
      - run: 
          name: frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

      # In the event test-frontend has failed, alert the engineering team
      - slack/notify:
          template: basic_fail_1
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Scan the backend"
      - checkout
      - restore_cache:
          key: backend-scan
      - run:
          name: backend scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

      # In the event scan-backend has failed, alert the engineering team
      - slack/notify:
          template: basic_fail_1
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail
  
  # 1. Infrastructure Phase - Create/Deploy/Configure Infrastructure
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # Install required tar utility for this image to have workflow workspace capability.
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=Udapeople-backend  

            export BACKEND_IP=$(aws ec2 describe-instances  \
              --region ${AWS_DEFAULT_REGION}  \
              --filters 'Name=tag:project,Values=Udapeople-backend' \
              --query "Reservations[*].Instances[0].PublicIpAddress"  \
              --output text)
            
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "${BACKEND_IP}" \
              https://api.memstash.io/values/backendurl
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=Udapeople-frontend

      - run: # In this job, also run the 'cat' bash command that prints the contents of .circle/ansible/inventory.txt
          name: Add back-end Public (IPv4) address to ansible inventory
          command: |        
            cd .circleci/ansible/
            rm ./inventory.txt

            BACKEND_DNS=$(aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION} \
              --filters 'Name=tag:project,Values=udapeople-backend' \
              --query "Reservations[*].Instances[0].PublicDnsName" \
              --output text)

            echo "[web]" >> ./inventory.txt
            echo ${BACKEND_DNS} >> ./inventory.txt

            cat ./inventory.txt

            yum install -y tar gzip

            curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT \
              --data ${BACKEND_DNS} \
              https://api.memstash.io/values/backend_dns

      # Save workspace block for subsequent jobs (i.e. configure-infrastructure) so that it gets saved to the workspace
      # so that it can be referenced in future jobs.
      - persist_to_workspace: 
          root: ./
          paths: 
              - .circleci/ansible/inventory.txt
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID}"
  
  # Configure infrastructure selceting a Docker image that supports Ansible
  configure-infrastructure:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      # Add the SSH key fingerprint to job so that Ansible will have access to the EC2 instance via SSH.
      - add_ssh_keys:
          fingerprints:
            - "72:a2:a0:42:ac:c9:2e:88:36:56:03:b4:49:fa:fb:25"
      # Reuse the workspace from the deploy-infrastructure job  
      # Attaching a workspace is like attaching a hard drive
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli 
      - run:
          name: Configure server
          command: |
            cat ./.circleci/ansible/inventory.txt         
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID}"

  # 2. Deploy Phase - Database Migrations/Deploy Front-End/Deploy Back-End
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: prepare environment for backend build
          command: |
            echo ENVIRONMENT=$ENVIRONMENT >> ./.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ./.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ./.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ./.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ./.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ./.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ./.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ./.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ./.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ./.env
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run build
            npm run migrations:revert
            npm run migrations > output.txt
            cat output.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if [ -s output.txt ]
            then
              if grep "has been executed successfully" output.txt
              then
                success="1"
                curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
                --request PUT --data ${success} \
                https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              fi 
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID}"
    
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip 
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            cd frontend 
            npm install
      - attach_workspace:
          at: ./
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request GET https://api.memstash.io/values/backend_dns)

            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            export API_URL=$(cat .circleci/api_url.txt)
            echo "${API_URL}" > frontend/.env
            npm i
            npm run build
            aws s3 cp ./dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # Rollback on failure
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID}"

  deploy-backend:
    docker:
      - image: python:3.9.1-alpine3.12  # supports Ansible
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "72:a2:a0:42:ac:c9:2e:88:36:56:03:b4:49:fa:fb:25"
      - restore_cache:
          keys: [backend-build]
      # Attach the "workspace" so that we have access to the previously generated inventory.txt
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update ansible tar gzip
            apk add --update zip unzip rsync openssh npm
            apk add --update curl nodejs-npm
      - run: # Install ansible in the agent that is running this job
          name: Deploy backend
          command: |  
            cd backend
            npm install
            npm run build
            echo build successful
            echo ENVIRONMENT=production > "/root/project/backend/dist/.env"
            echo TYPEORM_CONNECTION=postgres >> "/root/project/backend/dist/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity{.ts,.js} >> "/root/project/backend/dist/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "/root/project/backend/dist/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "/root/project/backend/dist/.env"
            echo NODE_ENV=production >> "/root/project/backend/dist/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "/root/project/backend/dist/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "/root/project/backend/dist/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "/root/project/backend/dist/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "/root/project/backend/dist/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "/root/project/backend/dist/.env"

            tar -czvf backend.tar.gz ./backend
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv backend.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
            pwd
            cd /root/project/.circleci/ansible/
            export ANSIBLE_HOST_KEY_CHECKING=False 
            export host_key_checking=False
            export record_host_keys=False

            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID}"

  # 3. Smoke Test Phase
  smoke-test: # aka Verification
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Get backend url
          command: |         
            BACKEND_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
            --request GET https://api.memstash.io/values/backend_dns)

            echo ${BACKEND_DNS}
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)

            echo "${BACKEND_IP}"

            curl -s "http://${BACKEND_IP}:3030/api/status" | grep "ok"
                
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-eu-west-2.amazonaws.com/#/employees"
            
            if curl -s --head ${URL} | grep "Welcome"
            then
              echo "Successful Smoke-test"
              exit 0
            else
              echo "Unsuccessful Smoke-test"
              exit 1
            fi 
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:  
          workflow-id: "${CIRCLE_WORKFLOW_ID}"
  
  # 5. Promotion Phase
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install -y curl
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-blue \
              --region eu-west-2 \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              
            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT --data "${OldWorkflowID}" \
                https://api.memstash.io/values/oldworkflowid

            export STACKS=($(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE \
              --no-paginate --output text))

            echo Old Workflow Id: "${OldWorkflowID}"
      - destroy-environment:  
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  # Setup Back-End Monitoring
  # Create a job that uses Ansible to go into the EC2 instance and install the exporter.
  install-node-exporter:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
      - run:
          name: Install node exporter
          command: |
            export hostname=$(cat ./.circleci/ansible/inventory.txt)
            echo EC2 instance: "${hostname}"
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -vvv -i .circleci/ansible/inventory.txt .circleci/ansible/configure-prometheus-node-exporter/tasks/main.yml
      - destroy-environment:  
          workflow-id: "${CIRCLE_WORKFLOW_ID}" 

  # 6. Cleanup Phase
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/oldworkflowid)

            echo Old Workflow Id: "${OldWorkflowID}"
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/oldworkflowid)

            export STACKS=($(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE \
              --no-paginate --output text))

            echo Old Workflow Id: "${OldWorkflowID}"

            echo Stack: "${STACKS[@]}"

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Deleting old stacks"
              aws s3 rm s3://udapeople-"${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name udapeople-frontend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name udapeople-cloudfront
            fi
      - destroy-environment:  
          workflow-id: "${CIRCLE_WORKFLOW_ID}" 

# Orchestrate or schedule the jobs
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend: 
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update: 
          requires: [smoke-test]
      - install-node-exporter:
          requires: [cloudfront-update]
      # - cleanup:
      #     requires: [cloudfront-update]