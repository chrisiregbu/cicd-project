version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@2.0.3 

commands:
  # 4. Rollback Phase
  # Reusable command that will handle the the work of destroying the green infrastructure  
  # Given a WORKFLOW ID, rollback or destroy the CloudFormation stack
  destroy-environment: 
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environment << parameters.workflow_id >>
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable whereas  
          # ${CIRCLE_WORKFLOW_ID:0:7} takes the first 7 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            if aws s3 ls | grep udapeople-<< parameters.workflow_id >>; then
              aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            fi
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            status=$(curl -H "token: << parameters.workflow_id >>" \
            --request GET https://api.memstash.io/values/migration-<< parameters.workflow_id >>) 

            echo $status
            if [[ "${status}" == 1 ]]; then
              npm run migrations:revert
            fi
jobs:
  integration-test-templates:
    parameters:
      runner:
        type: executor
        default: cimg
    executor: <<parameters.runner>>
    steps:
      - slack/notify:
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Build the frontend"
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end build
          command: |
            cd frontend
            echo $CODE
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      # notify_on_fail_with_template. Taken from Circleci Developer page  - https://circleci.com/developer/orbs/orb/circleci/slack
      # In the event the front-end build has failed, alert UdaPeople
      - slack/notify:
          template: basic_fail_1
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Build the backend"
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack/notify:
          template: basic_fail_1
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Test the frontend"
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: frontend test
          command: |
            cd frontend 
            npm install
            npm run test
      # In the event test-frontend has failed, alert UdaPeople
      - slack/notify:
          template: basic_fail_1
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Test the backend"
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: backend test 
          command: |
            cd backend
            npm install
            npm run test
      # In the event test-backend has failed, alert UdaPeople
      - slack/notify:
          template: basic_fail_1
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail

  # Scan for known vulnerabilities
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Scan the frontend"
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run: 
          name: frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical
      # In the event test-frontend has failed, alert the engineering team
      - slack/notify:
          template: basic_fail_1
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Scan the backend"
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical
      # In the event scan-backend has failed, alert the engineering team
      - slack/notify:
          template: basic_fail_1
          custom: | 
            {
                "text": "",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "❌ Failed in build #${CIRCLE_BUILD_NUM} of <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME> (<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- $CIRCLE_USERNAME: $CIRCLE_JOB (<$CIRCLE_BUILD_URL|${CIRCLE_WORKFLOW_ID:0:7}>)"
                        }
                    }
                ]
            }  
          event: fail
  
  # 1. Infrastructure Phase - Create/Deploy/Configure Infrastructure
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # Install required tar utility for this image to have workflow workspace capability.
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend

      - run: # In this job, also run the 'cat' bash command that prints the contents of .circle/ansible/inventory.txt
          name: Add back-end IP to ansible inventory
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION} \
              --filters 'Name=tag:project,Values=udapeople-backend' \
              --query 'Reservations[*].Instances[0].PublicIpAddress' \
              --output text)

            echo "${BACKEND_IP}" >> .circleci/ansible/inventory.txt

            cat .circleci/ansible/inventory.txt

            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "${BACKEND_IP}" \
              https://api.memstash.io/values/backendurl
      # Save the modified inventory file workspace so that it can be used in future jobs
      - persist_to_workspace: 
          root: ./
          paths: 
              - .circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  # Configure infrastructure selceting a Docker image that supports Ansible
  configure-infrastructure:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      # Add the SSH key fingerprint to job so that Ansible will have access to the EC2 instance via SSH.
      - add_ssh_keys:
          fingerprints:
            - "ef:69:64:e9:df:d5:5c:23:6f:ba:09:88:ef:ba:39:89"
      # Reuse the workspace from the deploy-infrastructure job  
      # Attaching a workspace is like attaching a hard drive
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
      - run:
          name: Configure server
          command: |
            cat ./.circleci/ansible/inventory.txt         
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # 2. Deploy Phase - Database Migrations/Deploy Front-End/Deploy Back-End
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: prepare environment for backend build
          command: |
            echo "Preparing environment for backend build"
            echo ENVIRONMENT=$ENVIRONMENT >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm install
            sudo npm run migrations 2>&1 | tee migration-dump.txt

            status_code="${PIPESTATUS[0]}"
            if [[ ! "${status_code}" == 0 ]]; then
              echo "Migration successful"
              exit 1
            else
              echo "Migration unsuccessful"
              exit 0
            fi
      - run:
          name: Send migration results to memstash
          command: |
            if cat migration-log.txt | grep "has been executed successfully"; then
              echo "Sending migration results to memstash"
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
                --request PUT --data "1" \
                https://api.memstash.io/values/migration-"${CIRCLE_WORKFLOW_ID:0:7}"
            else
              echo "Failed to send migration results to memstash"
            fi
      - run:
          name: Install aws-cli
          when: on_fail
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - attach_workspace:
          at: ./
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request GET https://api.memstash.io/values/backendip)
            
            echo $BACKEND_IP

            export API_URL="https://${BACKEND_IP}:3030"
            echo $API_URL
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            aws s3 cp ./dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.9.1-alpine3.12  # supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ef:69:64:e9:df:d5:5c:23:6f:ba:09:88:ef:ba:39:89"
      - restore_cache:
          keys: [backend-build]
      # Attach the "workspace" so that we have access to the previously generated inventory.txt
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible aws-cli openssh-client tar
      - run: # Install ansible in the agent that is running this job
          name: Deploy backend
          command: |  
            cd backend
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # 3. Smoke Test Phase
  smoke-test: # aka Verification
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
            sudo apt install -y python3 ansible
      - run:
          name: Get backend url
          command: |         
            curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backendurl > backend-url.txt
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(cat backend-url.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
            if curl -v --head ${URL} | grep "Welcome"
            then
              echo "Website does not exist"
              exit 1
            else
              echo "Website exists"
              exit 0
            fi 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:  
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  # 5. Promotion Phase
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install -y curl
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-blue \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              
            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT --data "${OldWorkflowID}" \
                https://api.memstash.io/values/oldworkflowid

            export STACKS=($(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE \
              --no-paginate --output text))

            echo Old Workflow Id: "${OldWorkflowID}"
      - destroy-environment:  
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # Setup Back-End Monitoring
  # Create a job that uses Ansible to go into the EC2 instance and install the exporter.
  install-node-exporter:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
      - run:
          name: Install node exporter
          command: |
            export hostname=$(cat ./.circleci/ansible/inventory.txt)
            echo EC2 instance: "${hostname}"
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -vvv -i .circleci/ansible/inventory.txt .circleci/ansible/configure-prometheus-node-exporter/tasks/main.yml

  # 6. Cleanup Phase
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/oldworkflowid)

            echo Old Workflow Id: "${OldWorkflowID}"
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/oldworkflowid)

            export STACKS=($(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE \
              --no-paginate --output text))

            echo Old Workflow Id: "${OldWorkflowID}"

            echo Stack: "${STACKS[@]}"

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Deleting old stacks"
              aws s3 rm s3://udapeople-"${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name udapeople-frontend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name udapeople-cloudfront
            fi 

# Orchestrate or schedule the jobs
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend: 
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update: 
      #     requires: [smoke-test]
      # - install-node-exporter:
      #     requires: [cloudfront-update]
      # - cleanup:
      #     requires: [cloudfront-update]